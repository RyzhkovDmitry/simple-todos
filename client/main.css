/* CSS declarations go here */


<head>

  <title>simple</title>

</head>

Then we create some new files in the imports/ directory:
2.2  Add starter HTML code
imports/ui/body.html »

<body>

  <div class="container">

    <header>

      <h1>Todo List</h1>

    </header>

 

    <ul>

      {{#each tasks}}

        {{> task}}

      {{/each}}

    </ul>

  </div>

</body>

 

<template name="task">

  <li>{{text}}</li>

</template>

2.3  Add starter JS code
imports/ui/body.js »

import { Template } from 'meteor/templating';

 

import './body.html';

 

Template.body.helpers({

  tasks: [

    { text: 'This is task 1' },

    { text: 'This is task 2' },

    { text: 'This is task 3' },

  ],

});

Files inside imports/ only load if they are imported, so we'll need to import imports/ui/body.js from our frontend JS entrypoint (client/main.js---note that we remove the rest of the code from this file):
2.4  Import starter JS
client/main.js »

import '../imports/ui/body.js';

You can read more about how imports work and how to structure your code in the Application Structure article of the Meteor Guide.

In our browser, the app will now look much like this:

    Todo List

        This is task 1
        This is task 2
        This is task 3

Now let's find out what all these bits of code are doing!
HTML files in Meteor define templates

Meteor parses HTML files and identifies three top-level tags: <head>, <body>, and <template>.

Everything inside any <head> tags is added to the head section of the HTML sent to the client, and everything inside <body> tags is added to the body section, just like in a regular HTML file.

Everything inside <template> tags is compiled into Meteor templates, which can be included inside HTML with {{> templateName}} or referenced in your JavaScript with Template.templateName.

Also, the body section can be referenced in your JavaScript with Template.body. Think of it as a special "parent" template, that can include the other child templates.
Adding logic and data to templates

All of the code in your HTML files is compiled with Meteor's Spacebars compiler. Spacebars uses statements surrounded by double curly braces such as {{#each}} and {{#if}} to let you add logic and data to your views.

You can pass data into templates from your JavaScript code by defining helpers. In the code above, we defined a helper called tasks on Template.body that returns an array. Inside the body tag of the HTML, we can use {{#each tasks}} to iterate over the array and insert a task template for each value. Inside the #each block, we can display the text property of each array item using {{text}}.

In the next step, we will see how we can use helpers to make our templates display dynamic data from a database collection.
2.5  Add CSS
client/main.css »

/* CSS declarations go here */

body {

  font-family: sans-serif;

  background-color: #315481;

  background-image: linear-gradient(to bottom, #315481, #918e82 100%);

  background-attachment: fixed;

 

  position: absolute;

  top: 0;

  bottom: 0;

  left: 0;

  right: 0;

 

  padding: 0;

  margin: 0;

 

  font-size: 14px;

}

 

.container {

  max-width: 600px;

  margin: 0 auto;

  min-height: 100%;

  background: white;

}

 

header {

  background: #d2edf4;

  background-image: linear-gradient(to bottom, #d0edf5, #e1e5f0 100%);

  padding: 20px 15px 15px 15px;

  position: relative;

}

 

#login-buttons {

  display: block;

}

 

h1 {

  font-size: 1.5em;

  margin: 0;

  margin-bottom: 10px;

  display: inline-block;

  margin-right: 1em;

}

 

form {

  margin-top: 10px;

  margin-bottom: -10px;

  position: relative;

}

 

.new-task input {

  box-sizing: border-box;

  padding: 10px 0;

  background: transparent;

  border: none;

  width: 100%;

  padding-right: 80px;

  font-size: 1em;

}

 

.new-task input:focus{

  outline: 0;

}

 

ul {

  margin: 0;

  padding: 0;

  background: white;

}

 

.delete {

  float: right;

  font-weight: bold;

  background: none;

  font-size: 1em;

  border: none;

  position: relative;

}

 

li {

  position: relative;

  list-style: none;

  padding: 15px;

  border-bottom: #eee solid 1px;

}

 

li .text {

  margin-left: 10px;

}

 

li.checked {

  color: #888;

}

 

li.checked .text {

  text-decoration: line-through;

}

 

li.private {

  background: #eee;

  border-color: #ddd;

}

 

header .hide-completed {

  float: right;

}

 

.toggle-private {

  margin-left: 5px;

}

 

@media (max-width: 600px) {

  li {

    padding: 12px 15px;

  }

 

  .search {

    width: 150px;

    clear: both;

  }

 

  .new-task input {

    padding-bottom: 5px;

  }

}

